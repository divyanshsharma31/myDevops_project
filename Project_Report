Project Report: CI/CD Pipeline with GitHub Actions & Docker
1. Project Overview

This project demonstrates a full CI/CD pipeline for a containerized application using GitHub Actions and Docker, deployed locally using Minikube. The objective is to automate building, testing, and deployment of Docker images without relying on cloud services.

Key Features:

Automated testing of the application.

Automated Docker image build and push to Docker Hub.

Local deployment using Minikube or a VM.

Full CI/CD workflow visible in GitHub Actions.

2. Tools and Technologies
Tool	Purpose
GitHub Actions	Automate CI/CD workflow (build, test, push).
Docker	Containerize the application.
Docker Hub	Store and distribute Docker images.
Minikube	Local Kubernetes cluster for deployment.
docker-compose	Manage multi-container applications locally.

3. Project Structure
project-root/
│
├── .github/
│   └── workflows/
│       └── ci-cd.yml      # GitHub Actions workflow file
│
├── app/
│   ├── main.py             # Application code
│   ├── requirements.txt    # Python dependencies
│
├── Dockerfile              # Docker image build instructions
├── docker-compose.yml      # Compose file for local deployment
├── README.md
└── tests/
    └── test_main.py        # Unit tests

4. Docker Configuration
Dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD ["python", "main.py"]

docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "5000:5000"

5. GitHub Actions Workflow
.github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install -r app/requirements.txt

      - name: Run tests
        run: pytest tests/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t myusername/myapp:latest .
          docker push myusername/myapp:latest


Notes:

Docker Hub credentials are stored as GitHub Secrets.

Tests run automatically on each push or PR to main.

Successful build triggers Docker image push.

6. Local Deployment with Minikube

Start Minikube:

minikube start --driver=docker


Deploy the Docker image:

docker pull myusername/myapp:latest
docker run -p 5000:5000 myusername/myapp:latest


Access the application at:

http://localhost:3000


7. CI/CD Workflow Results

GitHub Actions successfully ran:

Unit tests → Passed ✅

Docker build → Completed ✅

Docker push to Docker Hub → Completed ✅
